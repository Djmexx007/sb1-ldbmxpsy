import React, { useState } from 'react';
import { Book, Brain, Timer, Puzzle, ArrowLeft, ArrowRight, Star, Trophy, Gamepad2, Info } from 'lucide-react';
import { PreviewDisplay } from '../PreviewDisplay';

interface Game {
  id: string;
  name: string;
  icon: React.ElementType;
  description: string;
  howToPlay: string[];
  objectives: string[];
  tips: string[];
  rewards: string[];
  demo?: React.ReactNode;
}

const games: Game[] = [
  {
    id: 'memory',
    name: "Memory des Assurances",
    icon: Brain,
    description: "Testez et am√©liorez votre connaissance des termes d'assurance √† travers un jeu de m√©moire captivant.",
    howToPlay: [
      "Retournez une premi√®re carte pour d√©couvrir un terme d'assurance",
      "Retournez une seconde carte pour trouver sa d√©finition correspondante",
      "Faites des paires correctes pour gagner des points",
      "Compl√©tez toutes les paires pour terminer le niveau"
    ],
    objectives: [
      "Ma√Ætriser les termes cl√©s des 4 domaines d'assurance",
      "Comprendre les d√©finitions pr√©cises",
      "D√©velopper sa m√©moire professionnelle",
      "Gagner en rapidit√© de reconnaissance"
    ],
    tips: [
      "Commencez par les termes que vous connaissez d√©j√†",
      "Lisez attentivement les d√©finitions",
      "Faites des associations logiques",
      "Utilisez les indices visuels"
    ],
    rewards: [
      "XP bonus pour la rapidit√©",
      "Badges de ma√Ætrise par domaine",
      "Titres sp√©ciaux pour les scores parfaits",
      "Bonus pour les s√©ries r√©ussies"
    ],
    demo: (
      <div className="p-6 bg-black/30 rounded-lg border border-green-500/30">
        <div className="grid grid-cols-2 gap-4">
          <div className="p-4 bg-green-900/20 rounded border border-green-500/30">
            <h4 className="font-bold mb-2">Terme</h4>
            <p>Assurance vie temporaire</p>
          </div>
          <div className="p-4 bg-green-900/20 rounded border border-green-500/30">
            <h4 className="font-bold mb-2">D√©finition</h4>
            <p>Protection pour une p√©riode d√©termin√©e avec prestation au d√©c√®s</p>
          </div>
        </div>
        <div className="mt-4 text-sm text-green-300/70">
          Exemple de paire √† associer dans le jeu
        </div>
      </div>
    )
  },
  {
    id: 'matching',
    name: "Association de Termes",
    icon: Book,
    description: "Associez les termes avec leurs d√©finitions dans un jeu de correspondance simple et efficace.",
    howToPlay: [
      "Cliquez sur un terme dans la colonne de gauche",
      "Cliquez sur la d√©finition correspondante √† droite",
      "Les bonnes paires sont valid√©es automatiquement",
      "Compl√©tez toutes les associations pour gagner"
    ],
    objectives: [
      "Comprendre les d√©finitions",
      "D√©velopper l'analyse",
      "Ma√Ætriser le vocabulaire technique"
    ],
    tips: [
      "Commencez par les termes familiers",
      "Utilisez l'√©limination pour les plus difficiles",
      "Relisez chaque d√©finition attentivement"
    ],
    rewards: [
      "Points bonus pour la pr√©cision",
      "R√©compense pour z√©ro erreur",
      "XP pour rapidit√©"
    ]
  },
  {
    id: 'puzzle',
    name: "Puzzle de Processus",
    icon: Puzzle,
    description: "R√©organisez les √©l√©ments d'un document d'assurance pour comprendre sa structure.",
    howToPlay: [
      "Glissez les pi√®ces ou cliquez pour les √©changer",
      "Placez-les dans l'ordre logique",
      "Les bonnes positions sont valid√©es automatiquement",
      "Terminez le puzzle pour gagner"
    ],
    objectives: [
      "Comprendre la structure des contrats",
      "Visualiser les √©tapes cl√©s",
      "Ma√Ætriser la s√©quence logique"
    ],
    tips: [
      "Identifiez le d√©but et la fin",
      "Cherchez les transitions logiques",
      "Utilisez les indices de contenu"
    ],
    rewards: [
      "Bonus pour peu de mouvements",
      "R√©compenses pour ordre parfait",
      "XP selon la rapidit√©"
    ]
  },
  {
    id: 'speed',
    name: "Quiz Express",
    icon: Timer,
    description: "R√©pondez rapidement √† des quiz pour tester vos connaissances sous pression.",
    howToPlay: [
      "Lisez la question rapidement",
      "Choisissez la bonne r√©ponse avant la fin du temps",
      "Les bonnes r√©ponses encha√Æn√©es augmentent le score",
      "Chaque bonne r√©ponse ajoute du temps"
    ],
    objectives: [
      "Am√©liorer la rapidit√© de rappel",
      "D√©velopper la gestion du stress",
      "Renforcer les r√©flexes de r√©ponse"
    ],
    tips: [
      "Restez concentr√© malgr√© le chrono",
      "Lisez toutes les options rapidement",
      "Fiez-vous √† votre intuition"
    ],
    rewards: [
      "Multiplicateur de score",
      "Bonus de temps",
      "XP pour rapidit√© et pr√©cision"
    ]
  }
];

interface TutorialProps {
  onBack: () => void;
  onStartGame: (gameId: string) => void;
}

export const Tutorial: React.FC<TutorialProps> = ({ onBack, onStartGame }) => {
  const [selectedGame, setSelectedGame] = useState<Game | null>(null);
  const [showDemo, setShowDemo] = useState(false);

  return (
    <div className="space-y-4">
      {!selectedGame ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {games.map((game) => (
            <button
              key={game.id}
              onClick={() => setSelectedGame(game)}
              className="p-6 rounded-xl border-2 border-green-900/50 hover:border-green-700 bg-black/30 text-left transition-all"
            >
              <game.icon className="w-12 h-12 mb-4" />
              <h3 className="text-lg font-bold mb-2">{game.name}</h3>
              <p className="text-green-300/70 text-sm">{game.description}</p>
            </button>
          ))}
        </div>
      ) : (
        <div className="space-y-6">
          <div className="p-6 bg-black/30 rounded-xl border-2 border-green-500/30">
            <div className="flex items-center gap-4 mb-6">
              <selectedGame.icon className="w-12 h-12" />
              <div>
                <h2 className="text-xl font-bold">{selectedGame.name}</h2>
                <p className="text-green-300/70">{selectedGame.description}</p>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <h3 className="text-lg font-bold flex items-center gap-2">
                  <Book className="w-5 h-5" />
                  Comment jouer
                </h3>
                <ul className="space-y-2">
                  {selectedGame.howToPlay.map((step, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <span className="text-green-400">{index + 1}.</span>
                      {step}
                    </li>
                  ))}
                </ul>
              </div>

              <div className="space-y-4">
                <h3 className="text-lg font-bold flex items-center gap-2">
                  <Star className="w-5 h-5" />
                  Objectifs
                </h3>
                <ul className="space-y-2">
                  {selectedGame.objectives.map((objective, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <span className="text-yellow-400">‚Ä¢</span>
                      {objective}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>

          {selectedGame.demo && (
            <PreviewDisplay>
              <div className="p-6">
                <h3 className="text-lg font-bold flex items-center gap-2 mb-4">
                  <Gamepad2 className="w-5 h-5" />
                  D√©monstration
                </h3>
                {selectedGame.demo}
              </div>
            </PreviewDisplay>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="p-6 bg-black/30 rounded-xl border-2 border-green-500/30">
              <h3 className="text-lg font-bold flex items-center gap-2 mb-4">
                <Brain className="w-5 h-5" />
                Conseils
              </h3>
              <ul className="space-y-2">
                {selectedGame.tips.map((tip, index) => (
                  <li key={index} className="flex items-center gap-2">
                    <span className="text-green-400">üí°</span>
                    {tip}
                  </li>
                ))}
              </ul>
            </div>

            <div className="p-6 bg-black/30 rounded-xl border-2 border-green-500/30">
              <h3 className="text-lg font-bold flex items-center gap-2 mb-4">
                <Trophy className="w-5 h-5" />
                R√©compenses
              </h3>
              <ul className="space-y-2">
                {selectedGame.rewards.map((reward, index) => (
                  <li key={index} className="flex items-center gap-2">
                    <span className="text-yellow-400">üèÜ</span>
                    {reward}
                  </li>
                ))}
              </ul>
            </div>
          </div>

          <div className="flex justify-between">
            <button
              onClick={() => setSelectedGame(null)}
              className="px-6 py-3 rounded-lg bg-black/30 border-2 border-green-500/30 hover:bg-green-900/30 transition-all flex items-center gap-2"
            >
              <ArrowLeft className="w-4 h-4" />
              Autres mini-jeux
            </button>
            <button
              onClick={() => onStartGame(selectedGame.id)}
              className="px-6 py-3 rounded-lg bg-green-500/20 border-2 border-green-500 hover:bg-green-500/30 transition-all flex items-center gap-2"
            >
              Commencer
              <ArrowRight className="w-4 h-4" />
            </button>
          </div>
        </div>
      )}
    </div>
  );
};